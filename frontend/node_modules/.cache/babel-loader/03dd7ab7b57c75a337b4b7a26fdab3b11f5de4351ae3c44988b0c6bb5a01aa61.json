{"ast":null,"code":"import { createStore } from 'vuex';\nimport axios from 'axios';\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000',\n  // Update with your backend API URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nconst store = createStore({\n  state: {},\n  mutations: {},\n  actions: {\n    register(context, userData) {\n      apiClient.post('/register', userData).then(response => {\n        if (response && response.data) {\n          console.log(response.data);\n          // Handle success, e.g., show success message or redirect\n        } else {\n          console.error('Invalid response data');\n          // Handle error, e.g., show error message\n        }\n      }).catch(error => {\n        if (error && error.response && error.response.data) {\n          console.error(error.response.data);\n          // Handle error, e.g., show error message\n        } else {\n          console.error('Invalid error response');\n          // Handle error, e.g., show error message\n        }\n      });\n    },\n\n    login(context, userData) {\n      apiClient.post('/login', userData).then(response => {\n        if (response && response.data) {\n          console.log(response.data);\n          // Handle success, e.g., store token in localStorage or redirect\n        } else {\n          console.error('Invalid response data');\n          // Handle error, e.g., show error message\n        }\n      }).catch(error => {\n        if (error && error.response && error.response.data) {\n          console.error(error.response.data);\n          // Handle error, e.g., show error message\n        } else {\n          console.error('Invalid error response');\n          // Handle error, e.g., show error message\n        }\n      });\n    }\n  },\n\n  modules: {}\n});\nexport default store;","map":{"version":3,"names":["createStore","axios","apiClient","create","baseURL","headers","store","state","mutations","actions","register","context","userData","post","then","response","data","console","log","error","catch","login","modules"],"sources":["C:/Users/piter/Desktop/Projekt/Frontend-App/frontend/src/store/index.js"],"sourcesContent":["import { createStore } from 'vuex'\nimport axios from 'axios'\n\nconst apiClient = axios.create({\n  baseURL: 'http://localhost:5000', // Update with your backend API URL\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\nconst store = createStore({\n  state: {},\n  mutations: {},\n  actions: {\n    register(context, userData) {\n      apiClient.post('/register', userData)\n        .then(response => {\n          if (response && response.data) {\n            console.log(response.data);\n            // Handle success, e.g., show success message or redirect\n          } else {\n            console.error('Invalid response data');\n            // Handle error, e.g., show error message\n          }\n        })\n        .catch(error => {\n          if (error && error.response && error.response.data) {\n            console.error(error.response.data);\n            // Handle error, e.g., show error message\n          } else {\n            console.error('Invalid error response');\n            // Handle error, e.g., show error message\n          }\n        });\n    },\n    login(context, userData) {\n      apiClient.post('/login', userData)\n        .then(response => {\n          if (response && response.data) {\n            console.log(response.data);\n            // Handle success, e.g., store token in localStorage or redirect\n          } else {\n            console.error('Invalid response data');\n            // Handle error, e.g., show error message\n          }\n        })\n        .catch(error => {\n          if (error && error.response && error.response.data) {\n            console.error(error.response.data);\n            // Handle error, e.g., show error message\n          } else {\n            console.error('Invalid error response');\n            // Handle error, e.g., show error message\n          }\n        });\n    }\n  },\n  modules: {}\n})\n\nexport default store"],"mappings":"AAAA,SAASA,WAAW,QAAQ,MAAM;AAClC,OAAOC,KAAK,MAAM,OAAO;AAEzB,MAAMC,SAAS,GAAGD,KAAK,CAACE,MAAM,CAAC;EAC7BC,OAAO,EAAE,uBAAuB;EAAE;EAClCC,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,MAAMC,KAAK,GAAGN,WAAW,CAAC;EACxBO,KAAK,EAAE,CAAC,CAAC;EACTC,SAAS,EAAE,CAAC,CAAC;EACbC,OAAO,EAAE;IACPC,QAAQA,CAACC,OAAO,EAAEC,QAAQ,EAAE;MAC1BV,SAAS,CAACW,IAAI,CAAC,WAAW,EAAED,QAAQ,CAAC,CAClCE,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;UAC7BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACC,IAAI,CAAC;UAC1B;QACF,CAAC,MAAM;UACLC,OAAO,CAACE,KAAK,CAAC,uBAAuB,CAAC;UACtC;QACF;MACF,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAI;QACd,IAAIA,KAAK,IAAIA,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACJ,QAAQ,CAACC,IAAI,EAAE;UAClDC,OAAO,CAACE,KAAK,CAACA,KAAK,CAACJ,QAAQ,CAACC,IAAI,CAAC;UAClC;QACF,CAAC,MAAM;UACLC,OAAO,CAACE,KAAK,CAAC,wBAAwB,CAAC;UACvC;QACF;MACF,CAAC,CAAC;IACN,CAAC;;IACDE,KAAKA,CAACV,OAAO,EAAEC,QAAQ,EAAE;MACvBV,SAAS,CAACW,IAAI,CAAC,QAAQ,EAAED,QAAQ,CAAC,CAC/BE,IAAI,CAACC,QAAQ,IAAI;QAChB,IAAIA,QAAQ,IAAIA,QAAQ,CAACC,IAAI,EAAE;UAC7BC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACC,IAAI,CAAC;UAC1B;QACF,CAAC,MAAM;UACLC,OAAO,CAACE,KAAK,CAAC,uBAAuB,CAAC;UACtC;QACF;MACF,CAAC,CAAC,CACDC,KAAK,CAACD,KAAK,IAAI;QACd,IAAIA,KAAK,IAAIA,KAAK,CAACJ,QAAQ,IAAII,KAAK,CAACJ,QAAQ,CAACC,IAAI,EAAE;UAClDC,OAAO,CAACE,KAAK,CAACA,KAAK,CAACJ,QAAQ,CAACC,IAAI,CAAC;UAClC;QACF,CAAC,MAAM;UACLC,OAAO,CAACE,KAAK,CAAC,wBAAwB,CAAC;UACvC;QACF;MACF,CAAC,CAAC;IACN;EACF,CAAC;;EACDG,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,eAAehB,KAAK"},"metadata":{},"sourceType":"module","externalDependencies":[]}